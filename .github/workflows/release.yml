name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: 'v0.1.0'


jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: Windows
            artifact_name: pdf-bank-extractor-windows.exe
            asset_name: pdf-bank-extractor-windows-x64.exe
          - os: ubuntu-latest
            name: Linux
            artifact_name: pdf-bank-extractor-linux
            asset_name: pdf-bank-extractor-linux-x64
          - os: macos-latest
            name: macOS
            artifact_name: pdf-bank-extractor-macos
            asset_name: pdf-bank-extractor-macos-x64

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable
        run: |
          pyinstaller --onefile --name "${{ matrix.artifact_name }}" --clean main.py

      - name: Generate file hash (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
            $hash = Get-FileHash -Path "dist/${{ matrix.artifact_name }}" -Algorithm SHA256
            $hash.Hash | Out-File -Encoding ascii -NoNewline "dist/${{ matrix.artifact_name }}.sha256"
            "SHA256: $($hash.Hash)" | Out-File -Encoding ascii -NoNewline "dist/${{ matrix.artifact_name }}.txt"

      - name: Generate file hash (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
            sha256sum dist/${{ matrix.artifact_name }} | cut -d ' ' -f1 > dist/${{ matrix.artifact_name }}.sha256
            echo "SHA256: $(cat dist/${{ matrix.artifact_name }}.sha256)" > dist/${{ matrix.artifact_name }}.txt


      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            dist/${{ matrix.artifact_name }}
            dist/${{ matrix.artifact_name }}.sha256
            dist/${{ matrix.artifact_name }}.txt

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate Release Notes with Git Diff
        run: |
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            echo "Previous tag: $PREV_TAG"

            echo "# PDF Bank Statement Extractor ${{ github.ref_name }}" > release-notes.md
            echo "" >> release-notes.md

            if [ -n "$PREV_TAG" ]; then
              echo "## Changes since $PREV_TAG" >> release-notes.md
              echo "" >> release-notes.md
              git log "$PREV_TAG"..HEAD --pretty=format:"- %s" >> release-notes.md
              echo "" >> release-notes.md
            else
              echo "## Initial release." >> release-notes.md
              echo "" >> release-notes.md
            fi

            cat <<EOF >> release-notes.md
            ### Features
            - Extract transaction dates and amounts from German bank statement PDFs
            - Export to CSV format with customizable options
            - Batch processing support
            - Robust error handling

            ### Downloads
            Choose the appropriate executable for your platform:
            - **Windows**: \`pdf-bank-extractor-windows-x64.exe\`
            - **Linux**: \`pdf-bank-extractor-linux-x64\`
            - **macOS**: \`pdf-bank-extractor-macos-x64\`

            ### File Verification
            Each executable includes SHA256 hash files for integrity verification.

            ### Usage
            \`\`\`bash
            # Extract from single PDF
            ./pdf-bank-extractor-[platform] -f statement.pdf

            # Extract from directory
            ./pdf-bank-extractor-[platform] -d /path/to/pdfs
            \`\`\`

            For more options, run with \`--help\`.
            EOF


      - name: Create Release (gh)
        run: |
            gh release create "${{ github.event.inputs.version || github.ref_name }}" \
            --title "Release ${{ github.ref_name }}" \
            --notes-file release-notes.md \
            --verify-tag
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload All Assets
        run: |
          for dir in artifacts/*; do
            for file in "$dir"/*; do
              gh release upload "${{ github.ref_name }}" "$file" --clobber
            done
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
